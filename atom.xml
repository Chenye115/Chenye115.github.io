<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kali-chen&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="chenye2000.top/"/>
  <updated>2020-04-09T03:21:05.640Z</updated>
  <id>chenye2000.top/</id>
  
  <author>
    <name>陈烨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chapter 5 Thread</title>
    <link href="chenye2000.top/2020/04/09/Chapter%205%20Thread/"/>
    <id>chenye2000.top/2020/04/09/Chapter%205%20Thread/</id>
    <published>2020-04-09T03:18:35.424Z</published>
    <updated>2020-04-09T03:21:05.640Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43721475/article/details/104834649&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OS Review Chapter 1: Introduction&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43721475/article/details/104836492&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OS Review Chapter 2: Computer-System Structures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43721475/article/details/104846186&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OS Review Chapter 3: Operating-System Structures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43721475/article/details/105397752&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OS Review Chapter 4: Process&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43721475/article/details/105404697&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OS Review Chapter 5: Thread&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Chapter-5-Thread&quot;&gt;&lt;a href=&quot;#Chapter-5-Thread&quot; class=&quot;headerlink&quot; title=&quot;Chapter 5 Thread&quot;&gt;&lt;/a&gt;Chapter 5 Thread&lt;/h1&gt;&lt;p&gt;What is a thread?–A thread, also known as lightweight process (LWP),&lt;strong&gt;is a basic unit of CPU execution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A thread has a thread ID, a program counter, a register set, and a stack–similar to a process&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;However, a thread shares with other threads in the same process its code section, data section, and other OS resources (e.g., files and signals). *&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/c51.png&quot; alt=&quot;1586356695921&quot;&gt;&lt;/p&gt;
&lt;p&gt;同一个进程的多个线程共享该进程的其他资源（不包括CPU、寄存器、栈）&lt;/p&gt;
&lt;p&gt;Linux中不存在线程进程的概念，同一称作task&lt;/p&gt;
&lt;p&gt;&lt;code&gt;图片无法加载请跳转至csdn&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="chenye2000.top/2020/03/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>chenye2000.top/2020/03/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-03-22T03:30:54.174Z</published>
    <updated>2020-03-22T03:36:49.208Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java多线程&quot;&gt;&lt;a href=&quot;#Java多线程&quot; class=&quot;headerlink&quot; title=&quot;Java多线程&quot;&gt;&lt;/a&gt;Java多线程&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;方法间的调用：普通方法的调用，从哪来到哪里去，闭合的一条路径&lt;/li&gt;
&lt;li&gt;多线程的使用：开辟了多条路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;程序、进程与线程&quot;&gt;&lt;a href=&quot;#程序、进程与线程&quot; class=&quot;headerlink&quot; title=&quot;程序、进程与线程&quot;&gt;&lt;/a&gt;程序、进程与线程&lt;/h3&gt;&lt;p&gt;在操作系统中运行的程序就是进程，如看视频，一个进程（Process）可以有多个线程（Thread），如视频中同时听声音，看图像，显示字幕等等&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NzA1MTcyMA==&amp;mid=403498894&amp;idx=2&amp;sn=219c1a6001b5bb7e6bdc7963b1af8450&amp;scene=2&amp;srcid=0330UDNmQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;很有意思的关于线程的理解&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进程是资源管理的最小单位，线程是程序执行的最小单位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个进程都有自己的数据段、代码段和堆栈段。线程是轻量级的进程，它包含独立的栈和CPU寄存器状态，线程是进程的一条执行路径，每个线程共享其所附属进程的所有资源，包括打开的文件、内存页面、信号标识以及动态分配的内存等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为线程和进程比起来很小，所以相对来说，线程花费更少的CPU资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在操作系统设计上，从进程演化出线程，最主要的目的就是更好的支持多处理器，并且减少进程上下文切换的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程和进程的关系：线程是属于进程的，线程运行在进程空间内，同一进程所产生的的线程共享同一用户内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。所以，线程不能独立地执行，它必须依附在一个运行的应用程序上（即进程上），而一个进程至少需要一个线程作为它的指令执行，进程管理着资源（比如CPU、内存、文件等等）。而将线程分配到某个CPU上执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;线程和进程的区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/5.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML&amp;CSS学习笔记</title>
    <link href="chenye2000.top/2020/03/21/HTML&amp;CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>chenye2000.top/2020/03/21/HTML&amp;CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-21T13:16:27.442Z</published>
    <updated>2020-03-21T13:39:40.168Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;写于1月18日至1月26日左右&lt;/p&gt;
&lt;h1 id=&quot;day1&quot;&gt;&lt;a href=&quot;#day1&quot; class=&quot;headerlink&quot; title=&quot;day1&quot;&gt;&lt;/a&gt;day1&lt;/h1&gt;&lt;p&gt;1.HTML中不区分大小写&lt;/p&gt;
&lt;p&gt;2.注释不能嵌套&lt;/p&gt;
&lt;p&gt;3.标签必须结构完整&lt;/p&gt;
&lt;p&gt;4.XML 更加严谨&lt;/p&gt;
&lt;p&gt;5.浏览器尽最大努力正确加些页面，自动修正，但有些情况会错误修正&lt;/p&gt;
&lt;p&gt;6.HTML标签可以嵌套，但是不能交叉嵌套&lt;/p&gt;
&lt;p&gt;7.使用内联框架&lt;strong&gt;&lt;em&gt;iframe&lt;/em&gt;&lt;/strong&gt;可以引入一个外部的页面  使用iftrame来创建一个内联框架 &lt;/p&gt;
&lt;p&gt;现实开发中不推荐使用内联框架，内联框架中的内容不会被搜索引擎所检索&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/code.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>陈烨的 2019年度总结</title>
    <link href="chenye2000.top/2020/03/21/%E9%99%88%E7%83%A8%E7%9A%84%202019%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>chenye2000.top/2020/03/21/%E9%99%88%E7%83%A8%E7%9A%84%202019%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-21T11:45:08.478Z</published>
    <updated>2020-03-22T03:33:25.713Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;陈烨的-2019年度总结&quot;&gt;&lt;a href=&quot;#陈烨的-2019年度总结&quot; class=&quot;headerlink&quot; title=&quot;陈烨的 2019年度总结&quot;&gt;&lt;/a&gt;&lt;strong&gt;陈烨的&lt;/strong&gt; 2019年度总结&lt;/h2&gt;&lt;h4 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;&lt;strong&gt;回顾&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;2015 2016 2017 2018 2019，每年的年度总结都不曾落下，写在日记里。&lt;/p&gt;
&lt;p&gt;之前的文字现在看起来不如当时那般融入了情感，只能略微地回忆起当时的心情。&lt;/p&gt;
&lt;p&gt;2015年12月31日，“月考失利，这样的成绩令人无地自容。”&lt;/p&gt;
&lt;p&gt;2016年12月31日，“和几乎每一次放假一样，一到家就是鸡飞狗跳。”“然而仿佛一年过去了，我仍不曾真实地记录下每一点想法。”“眨眼，我的笔就跨过了三个年头。”“那么眨眼间，下一幕又是什么呢？”&lt;/p&gt;
&lt;p&gt;2017年12月31日，衡水，昆仑大酒店。“爸爸和学校的老师前几日来过了。””我选择了隐忍，是为了图强。”“我的高考，妹妹的诞生。”&lt;/p&gt;
&lt;p&gt;2018年12月31日，南京，“到了大学，反倒写日记的时间少了。”“一个人来到这个学校，每一天都值得铭记。”2019年1月1日。“想在跨年晚会前把日记写完，但高估了思维转化为文字落在纸面上的时间了。”“放手去追求，放手爱自由。”“ ”即使倒下，也要朝着未名湖的方向” 。”“已经走远了，也许会回来，也许不会。我不想停留在这种记忆里了。”“2019，向往自由。”&lt;/p&gt;
&lt;p&gt;2019年12月31日，说来就来了。&lt;/p&gt;
&lt;p&gt;（未完）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../images/naruto.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Welcome to my World</title>
    <link href="chenye2000.top/2020/03/21/hello-world/"/>
    <id>chenye2000.top/2020/03/21/hello-world/</id>
    <published>2020-03-21T03:18:30.826Z</published>
    <updated>2020-03-21T13:07:27.939Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;你好你好！&lt;/p&gt;
&lt;p&gt;这是我第一次动手搭建自己的博客，希望能在这里把一些有趣的事情分享给大家。有的人可能觉得，程序员应该写技术博客呀，但是程序员也是有感情的，还有的程序员喜欢看书喜欢拉小提琴（虽然很久不练习了），也喜欢听音乐看电影之类的，并且很乐于把他们分享给大家。总之，我的地盘我做主，welcome to my world !&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/21/hello-world/sakura.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/sakura.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
